// source: system_api.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var common_pb = require('./common_pb.js');
goog.object.extend(proto, common_pb);
goog.exportSymbol('proto.base.FileDescription', null, global);
goog.exportSymbol('proto.base.FileUploadChunkRequest', null, global);
goog.exportSymbol('proto.base.FileUploadRequest', null, global);
goog.exportSymbol('proto.base.FileUploadRequest.DataCase', null, global);
goog.exportSymbol('proto.base.FileUploadResponse', null, global);
goog.exportSymbol('proto.base.FileUploadResponse.DataCase', null, global);
goog.exportSymbol('proto.base.ReloadMessage', null, global);
goog.exportSymbol('proto.base.ReloadMessage.StatusCase', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.base.ReloadMessage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.base.ReloadMessage.oneofGroups_);
};
goog.inherits(proto.base.ReloadMessage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.base.ReloadMessage.displayName = 'proto.base.ReloadMessage';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.base.FileDescription = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.base.FileDescription, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.base.FileDescription.displayName = 'proto.base.FileDescription';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.base.FileUploadRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.base.FileUploadRequest.oneofGroups_);
};
goog.inherits(proto.base.FileUploadRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.base.FileUploadRequest.displayName = 'proto.base.FileUploadRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.base.FileUploadChunkRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.base.FileUploadChunkRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.base.FileUploadChunkRequest.displayName = 'proto.base.FileUploadChunkRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.base.FileUploadResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.base.FileUploadResponse.oneofGroups_);
};
goog.inherits(proto.base.FileUploadResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.base.FileUploadResponse.displayName = 'proto.base.FileUploadResponse';
}

/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.base.ReloadMessage.oneofGroups_ = [[1,2]];

/**
 * @enum {number}
 */
proto.base.ReloadMessage.StatusCase = {
  STATUS_NOT_SET: 0,
  CONFIGURATION: 1,
  ERRORMESSAGE: 2
};

/**
 * @return {proto.base.ReloadMessage.StatusCase}
 */
proto.base.ReloadMessage.prototype.getStatusCase = function() {
  return /** @type {proto.base.ReloadMessage.StatusCase} */(jspb.Message.computeOneofCase(this, proto.base.ReloadMessage.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.base.ReloadMessage.prototype.toObject = function(opt_includeInstance) {
  return proto.base.ReloadMessage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.base.ReloadMessage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.base.ReloadMessage.toObject = function(includeInstance, msg) {
  var f, obj = {
    configuration: (f = msg.getConfiguration()) && common_pb.Configuration.toObject(includeInstance, f),
    errormessage: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.base.ReloadMessage}
 */
proto.base.ReloadMessage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.base.ReloadMessage;
  return proto.base.ReloadMessage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.base.ReloadMessage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.base.ReloadMessage}
 */
proto.base.ReloadMessage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new common_pb.Configuration;
      reader.readMessage(value,common_pb.Configuration.deserializeBinaryFromReader);
      msg.setConfiguration(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setErrormessage(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.base.ReloadMessage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.base.ReloadMessage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.base.ReloadMessage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.base.ReloadMessage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getConfiguration();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      common_pb.Configuration.serializeBinaryToWriter
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional Configuration configuration = 1;
 * @return {?proto.base.Configuration}
 */
proto.base.ReloadMessage.prototype.getConfiguration = function() {
  return /** @type{?proto.base.Configuration} */ (
    jspb.Message.getWrapperField(this, common_pb.Configuration, 1));
};


/**
 * @param {?proto.base.Configuration|undefined} value
 * @return {!proto.base.ReloadMessage} returns this
*/
proto.base.ReloadMessage.prototype.setConfiguration = function(value) {
  return jspb.Message.setOneofWrapperField(this, 1, proto.base.ReloadMessage.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.base.ReloadMessage} returns this
 */
proto.base.ReloadMessage.prototype.clearConfiguration = function() {
  return this.setConfiguration(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.base.ReloadMessage.prototype.hasConfiguration = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string errorMessage = 2;
 * @return {string}
 */
proto.base.ReloadMessage.prototype.getErrormessage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.base.ReloadMessage} returns this
 */
proto.base.ReloadMessage.prototype.setErrormessage = function(value) {
  return jspb.Message.setOneofField(this, 2, proto.base.ReloadMessage.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.base.ReloadMessage} returns this
 */
proto.base.ReloadMessage.prototype.clearErrormessage = function() {
  return jspb.Message.setOneofField(this, 2, proto.base.ReloadMessage.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.base.ReloadMessage.prototype.hasErrormessage = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.base.FileDescription.prototype.toObject = function(opt_includeInstance) {
  return proto.base.FileDescription.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.base.FileDescription} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.base.FileDescription.toObject = function(includeInstance, msg) {
  var f, obj = {
    sha256: jspb.Message.getFieldWithDefault(msg, 1, ""),
    path: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.base.FileDescription}
 */
proto.base.FileDescription.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.base.FileDescription;
  return proto.base.FileDescription.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.base.FileDescription} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.base.FileDescription}
 */
proto.base.FileDescription.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setSha256(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setPath(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.base.FileDescription.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.base.FileDescription.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.base.FileDescription} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.base.FileDescription.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSha256();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getPath();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string sha256 = 1;
 * @return {string}
 */
proto.base.FileDescription.prototype.getSha256 = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.base.FileDescription} returns this
 */
proto.base.FileDescription.prototype.setSha256 = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string path = 2;
 * @return {string}
 */
proto.base.FileDescription.prototype.getPath = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.base.FileDescription} returns this
 */
proto.base.FileDescription.prototype.setPath = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.base.FileUploadRequest.oneofGroups_ = [[1,2]];

/**
 * @enum {number}
 */
proto.base.FileUploadRequest.DataCase = {
  DATA_NOT_SET: 0,
  FILEDESCRIPTION: 1,
  CHUNK: 2
};

/**
 * @return {proto.base.FileUploadRequest.DataCase}
 */
proto.base.FileUploadRequest.prototype.getDataCase = function() {
  return /** @type {proto.base.FileUploadRequest.DataCase} */(jspb.Message.computeOneofCase(this, proto.base.FileUploadRequest.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.base.FileUploadRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.base.FileUploadRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.base.FileUploadRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.base.FileUploadRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    filedescription: (f = msg.getFiledescription()) && proto.base.FileDescription.toObject(includeInstance, f),
    chunk: msg.getChunk_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.base.FileUploadRequest}
 */
proto.base.FileUploadRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.base.FileUploadRequest;
  return proto.base.FileUploadRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.base.FileUploadRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.base.FileUploadRequest}
 */
proto.base.FileUploadRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.base.FileDescription;
      reader.readMessage(value,proto.base.FileDescription.deserializeBinaryFromReader);
      msg.setFiledescription(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setChunk(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.base.FileUploadRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.base.FileUploadRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.base.FileUploadRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.base.FileUploadRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFiledescription();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.base.FileDescription.serializeBinaryToWriter
    );
  }
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeBytes(
      2,
      f
    );
  }
};


/**
 * optional FileDescription fileDescription = 1;
 * @return {?proto.base.FileDescription}
 */
proto.base.FileUploadRequest.prototype.getFiledescription = function() {
  return /** @type{?proto.base.FileDescription} */ (
    jspb.Message.getWrapperField(this, proto.base.FileDescription, 1));
};


/**
 * @param {?proto.base.FileDescription|undefined} value
 * @return {!proto.base.FileUploadRequest} returns this
*/
proto.base.FileUploadRequest.prototype.setFiledescription = function(value) {
  return jspb.Message.setOneofWrapperField(this, 1, proto.base.FileUploadRequest.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.base.FileUploadRequest} returns this
 */
proto.base.FileUploadRequest.prototype.clearFiledescription = function() {
  return this.setFiledescription(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.base.FileUploadRequest.prototype.hasFiledescription = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional bytes chunk = 2;
 * @return {string}
 */
proto.base.FileUploadRequest.prototype.getChunk = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes chunk = 2;
 * This is a type-conversion wrapper around `getChunk()`
 * @return {string}
 */
proto.base.FileUploadRequest.prototype.getChunk_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getChunk()));
};


/**
 * optional bytes chunk = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getChunk()`
 * @return {!Uint8Array}
 */
proto.base.FileUploadRequest.prototype.getChunk_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getChunk()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.base.FileUploadRequest} returns this
 */
proto.base.FileUploadRequest.prototype.setChunk = function(value) {
  return jspb.Message.setOneofField(this, 2, proto.base.FileUploadRequest.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.base.FileUploadRequest} returns this
 */
proto.base.FileUploadRequest.prototype.clearChunk = function() {
  return jspb.Message.setOneofField(this, 2, proto.base.FileUploadRequest.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.base.FileUploadRequest.prototype.hasChunk = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.base.FileUploadChunkRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.base.FileUploadChunkRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.base.FileUploadChunkRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.base.FileUploadChunkRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    filedescription: (f = msg.getFiledescription()) && proto.base.FileDescription.toObject(includeInstance, f),
    chunks: jspb.Message.getFieldWithDefault(msg, 2, 0),
    chunkid: jspb.Message.getFieldWithDefault(msg, 3, 0),
    chunk: msg.getChunk_asB64(),
    cancelupload: jspb.Message.getBooleanFieldWithDefault(msg, 5, false),
    uploadtimeout: jspb.Message.getFieldWithDefault(msg, 6, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.base.FileUploadChunkRequest}
 */
proto.base.FileUploadChunkRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.base.FileUploadChunkRequest;
  return proto.base.FileUploadChunkRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.base.FileUploadChunkRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.base.FileUploadChunkRequest}
 */
proto.base.FileUploadChunkRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.base.FileDescription;
      reader.readMessage(value,proto.base.FileDescription.deserializeBinaryFromReader);
      msg.setFiledescription(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setChunks(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setChunkid(value);
      break;
    case 4:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setChunk(value);
      break;
    case 5:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setCancelupload(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setUploadtimeout(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.base.FileUploadChunkRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.base.FileUploadChunkRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.base.FileUploadChunkRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.base.FileUploadChunkRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFiledescription();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.base.FileDescription.serializeBinaryToWriter
    );
  }
  f = message.getChunks();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = message.getChunkid();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
  f = message.getChunk_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      4,
      f
    );
  }
  f = message.getCancelupload();
  if (f) {
    writer.writeBool(
      5,
      f
    );
  }
  f = message.getUploadtimeout();
  if (f !== 0) {
    writer.writeUint32(
      6,
      f
    );
  }
};


/**
 * optional FileDescription fileDescription = 1;
 * @return {?proto.base.FileDescription}
 */
proto.base.FileUploadChunkRequest.prototype.getFiledescription = function() {
  return /** @type{?proto.base.FileDescription} */ (
    jspb.Message.getWrapperField(this, proto.base.FileDescription, 1));
};


/**
 * @param {?proto.base.FileDescription|undefined} value
 * @return {!proto.base.FileUploadChunkRequest} returns this
*/
proto.base.FileUploadChunkRequest.prototype.setFiledescription = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.base.FileUploadChunkRequest} returns this
 */
proto.base.FileUploadChunkRequest.prototype.clearFiledescription = function() {
  return this.setFiledescription(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.base.FileUploadChunkRequest.prototype.hasFiledescription = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional uint32 chunks = 2;
 * @return {number}
 */
proto.base.FileUploadChunkRequest.prototype.getChunks = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.base.FileUploadChunkRequest} returns this
 */
proto.base.FileUploadChunkRequest.prototype.setChunks = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional uint32 chunkId = 3;
 * @return {number}
 */
proto.base.FileUploadChunkRequest.prototype.getChunkid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.base.FileUploadChunkRequest} returns this
 */
proto.base.FileUploadChunkRequest.prototype.setChunkid = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional bytes chunk = 4;
 * @return {string}
 */
proto.base.FileUploadChunkRequest.prototype.getChunk = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * optional bytes chunk = 4;
 * This is a type-conversion wrapper around `getChunk()`
 * @return {string}
 */
proto.base.FileUploadChunkRequest.prototype.getChunk_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getChunk()));
};


/**
 * optional bytes chunk = 4;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getChunk()`
 * @return {!Uint8Array}
 */
proto.base.FileUploadChunkRequest.prototype.getChunk_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getChunk()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.base.FileUploadChunkRequest} returns this
 */
proto.base.FileUploadChunkRequest.prototype.setChunk = function(value) {
  return jspb.Message.setProto3BytesField(this, 4, value);
};


/**
 * optional bool cancelUpload = 5;
 * @return {boolean}
 */
proto.base.FileUploadChunkRequest.prototype.getCancelupload = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 5, false));
};


/**
 * @param {boolean} value
 * @return {!proto.base.FileUploadChunkRequest} returns this
 */
proto.base.FileUploadChunkRequest.prototype.setCancelupload = function(value) {
  return jspb.Message.setProto3BooleanField(this, 5, value);
};


/**
 * optional uint32 uploadTimeout = 6;
 * @return {number}
 */
proto.base.FileUploadChunkRequest.prototype.getUploadtimeout = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.base.FileUploadChunkRequest} returns this
 */
proto.base.FileUploadChunkRequest.prototype.setUploadtimeout = function(value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.base.FileUploadResponse.oneofGroups_ = [[1,2,3]];

/**
 * @enum {number}
 */
proto.base.FileUploadResponse.DataCase = {
  DATA_NOT_SET: 0,
  FINISHED: 1,
  CANCELLED: 2,
  ERRORMESSAGE: 3
};

/**
 * @return {proto.base.FileUploadResponse.DataCase}
 */
proto.base.FileUploadResponse.prototype.getDataCase = function() {
  return /** @type {proto.base.FileUploadResponse.DataCase} */(jspb.Message.computeOneofCase(this, proto.base.FileUploadResponse.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.base.FileUploadResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.base.FileUploadResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.base.FileUploadResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.base.FileUploadResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    finished: jspb.Message.getBooleanFieldWithDefault(msg, 1, false),
    cancelled: jspb.Message.getBooleanFieldWithDefault(msg, 2, false),
    errormessage: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.base.FileUploadResponse}
 */
proto.base.FileUploadResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.base.FileUploadResponse;
  return proto.base.FileUploadResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.base.FileUploadResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.base.FileUploadResponse}
 */
proto.base.FileUploadResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setFinished(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setCancelled(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setErrormessage(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.base.FileUploadResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.base.FileUploadResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.base.FileUploadResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.base.FileUploadResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {boolean} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeBool(
      1,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeBool(
      2,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional bool finished = 1;
 * @return {boolean}
 */
proto.base.FileUploadResponse.prototype.getFinished = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));
};


/**
 * @param {boolean} value
 * @return {!proto.base.FileUploadResponse} returns this
 */
proto.base.FileUploadResponse.prototype.setFinished = function(value) {
  return jspb.Message.setOneofField(this, 1, proto.base.FileUploadResponse.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.base.FileUploadResponse} returns this
 */
proto.base.FileUploadResponse.prototype.clearFinished = function() {
  return jspb.Message.setOneofField(this, 1, proto.base.FileUploadResponse.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.base.FileUploadResponse.prototype.hasFinished = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional bool cancelled = 2;
 * @return {boolean}
 */
proto.base.FileUploadResponse.prototype.getCancelled = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 2, false));
};


/**
 * @param {boolean} value
 * @return {!proto.base.FileUploadResponse} returns this
 */
proto.base.FileUploadResponse.prototype.setCancelled = function(value) {
  return jspb.Message.setOneofField(this, 2, proto.base.FileUploadResponse.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.base.FileUploadResponse} returns this
 */
proto.base.FileUploadResponse.prototype.clearCancelled = function() {
  return jspb.Message.setOneofField(this, 2, proto.base.FileUploadResponse.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.base.FileUploadResponse.prototype.hasCancelled = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional string errorMessage = 3;
 * @return {string}
 */
proto.base.FileUploadResponse.prototype.getErrormessage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.base.FileUploadResponse} returns this
 */
proto.base.FileUploadResponse.prototype.setErrormessage = function(value) {
  return jspb.Message.setOneofField(this, 3, proto.base.FileUploadResponse.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.base.FileUploadResponse} returns this
 */
proto.base.FileUploadResponse.prototype.clearErrormessage = function() {
  return jspb.Message.setOneofField(this, 3, proto.base.FileUploadResponse.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.base.FileUploadResponse.prototype.hasErrormessage = function() {
  return jspb.Message.getField(this, 3) != null;
};


goog.object.extend(exports, proto.base);
