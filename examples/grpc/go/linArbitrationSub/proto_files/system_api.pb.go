// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.23.0
// 	protoc        v3.13.0
// source: system_api.proto

package base

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type Configuration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NetworkInfo    []*NetworkInfo `protobuf:"bytes,1,rep,name=networkInfo,proto3" json:"networkInfo,omitempty"`
	InterfacesJson []byte         `protobuf:"bytes,2,opt,name=interfacesJson,proto3" json:"interfacesJson,omitempty"`
	LicenseEndDate string         `protobuf:"bytes,3,opt,name=licenseEndDate,proto3" json:"licenseEndDate,omitempty"`
	PublicAddress  string         `protobuf:"bytes,4,opt,name=publicAddress,proto3" json:"publicAddress,omitempty"`
}

func (x *Configuration) Reset() {
	*x = Configuration{}
	if protoimpl.UnsafeEnabled {
		mi := &file_system_api_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Configuration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Configuration) ProtoMessage() {}

func (x *Configuration) ProtoReflect() protoreflect.Message {
	mi := &file_system_api_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Configuration.ProtoReflect.Descriptor instead.
func (*Configuration) Descriptor() ([]byte, []int) {
	return file_system_api_proto_rawDescGZIP(), []int{0}
}

func (x *Configuration) GetNetworkInfo() []*NetworkInfo {
	if x != nil {
		return x.NetworkInfo
	}
	return nil
}

func (x *Configuration) GetInterfacesJson() []byte {
	if x != nil {
		return x.InterfacesJson
	}
	return nil
}

func (x *Configuration) GetLicenseEndDate() string {
	if x != nil {
		return x.LicenseEndDate
	}
	return ""
}

func (x *Configuration) GetPublicAddress() string {
	if x != nil {
		return x.PublicAddress
	}
	return ""
}

type ReloadMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Status:
	//	*ReloadMessage_Configuration
	//	*ReloadMessage_ErrorMessage
	Status isReloadMessage_Status `protobuf_oneof:"status"`
}

func (x *ReloadMessage) Reset() {
	*x = ReloadMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_system_api_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReloadMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReloadMessage) ProtoMessage() {}

func (x *ReloadMessage) ProtoReflect() protoreflect.Message {
	mi := &file_system_api_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReloadMessage.ProtoReflect.Descriptor instead.
func (*ReloadMessage) Descriptor() ([]byte, []int) {
	return file_system_api_proto_rawDescGZIP(), []int{1}
}

func (m *ReloadMessage) GetStatus() isReloadMessage_Status {
	if m != nil {
		return m.Status
	}
	return nil
}

func (x *ReloadMessage) GetConfiguration() *Configuration {
	if x, ok := x.GetStatus().(*ReloadMessage_Configuration); ok {
		return x.Configuration
	}
	return nil
}

func (x *ReloadMessage) GetErrorMessage() string {
	if x, ok := x.GetStatus().(*ReloadMessage_ErrorMessage); ok {
		return x.ErrorMessage
	}
	return ""
}

type isReloadMessage_Status interface {
	isReloadMessage_Status()
}

type ReloadMessage_Configuration struct {
	Configuration *Configuration `protobuf:"bytes,1,opt,name=configuration,proto3,oneof"`
}

type ReloadMessage_ErrorMessage struct {
	ErrorMessage string `protobuf:"bytes,2,opt,name=errorMessage,proto3,oneof"`
}

func (*ReloadMessage_Configuration) isReloadMessage_Status() {}

func (*ReloadMessage_ErrorMessage) isReloadMessage_Status() {}

type FileDescription struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//  sha256 is base16 encoded
	Sha256 string `protobuf:"bytes,1,opt,name=sha256,proto3" json:"sha256,omitempty"`
	Path   string `protobuf:"bytes,2,opt,name=path,proto3" json:"path,omitempty"`
}

func (x *FileDescription) Reset() {
	*x = FileDescription{}
	if protoimpl.UnsafeEnabled {
		mi := &file_system_api_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FileDescription) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FileDescription) ProtoMessage() {}

func (x *FileDescription) ProtoReflect() protoreflect.Message {
	mi := &file_system_api_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FileDescription.ProtoReflect.Descriptor instead.
func (*FileDescription) Descriptor() ([]byte, []int) {
	return file_system_api_proto_rawDescGZIP(), []int{2}
}

func (x *FileDescription) GetSha256() string {
	if x != nil {
		return x.Sha256
	}
	return ""
}

func (x *FileDescription) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

type FileUploadRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Data:
	//	*FileUploadRequest_FileDescription
	//	*FileUploadRequest_Chunk
	Data isFileUploadRequest_Data `protobuf_oneof:"data"`
}

func (x *FileUploadRequest) Reset() {
	*x = FileUploadRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_system_api_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FileUploadRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FileUploadRequest) ProtoMessage() {}

func (x *FileUploadRequest) ProtoReflect() protoreflect.Message {
	mi := &file_system_api_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FileUploadRequest.ProtoReflect.Descriptor instead.
func (*FileUploadRequest) Descriptor() ([]byte, []int) {
	return file_system_api_proto_rawDescGZIP(), []int{3}
}

func (m *FileUploadRequest) GetData() isFileUploadRequest_Data {
	if m != nil {
		return m.Data
	}
	return nil
}

func (x *FileUploadRequest) GetFileDescription() *FileDescription {
	if x, ok := x.GetData().(*FileUploadRequest_FileDescription); ok {
		return x.FileDescription
	}
	return nil
}

func (x *FileUploadRequest) GetChunk() []byte {
	if x, ok := x.GetData().(*FileUploadRequest_Chunk); ok {
		return x.Chunk
	}
	return nil
}

type isFileUploadRequest_Data interface {
	isFileUploadRequest_Data()
}

type FileUploadRequest_FileDescription struct {
	FileDescription *FileDescription `protobuf:"bytes,1,opt,name=fileDescription,proto3,oneof"`
}

type FileUploadRequest_Chunk struct {
	Chunk []byte `protobuf:"bytes,2,opt,name=chunk,proto3,oneof"`
}

func (*FileUploadRequest_FileDescription) isFileUploadRequest_Data() {}

func (*FileUploadRequest_Chunk) isFileUploadRequest_Data() {}

type FileUploadChunkRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FileDescription *FileDescription `protobuf:"bytes,1,opt,name=fileDescription,proto3" json:"fileDescription,omitempty"`
	Chunks          uint32           `protobuf:"varint,2,opt,name=chunks,proto3" json:"chunks,omitempty"`
	ChunkId         uint32           `protobuf:"varint,3,opt,name=chunkId,proto3" json:"chunkId,omitempty"`
	Chunk           []byte           `protobuf:"bytes,4,opt,name=chunk,proto3" json:"chunk,omitempty"`
	CancelUpload    bool             `protobuf:"varint,5,opt,name=cancelUpload,proto3" json:"cancelUpload,omitempty"`
	UploadTimeout   uint32           `protobuf:"varint,6,opt,name=uploadTimeout,proto3" json:"uploadTimeout,omitempty"`
}

func (x *FileUploadChunkRequest) Reset() {
	*x = FileUploadChunkRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_system_api_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FileUploadChunkRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FileUploadChunkRequest) ProtoMessage() {}

func (x *FileUploadChunkRequest) ProtoReflect() protoreflect.Message {
	mi := &file_system_api_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FileUploadChunkRequest.ProtoReflect.Descriptor instead.
func (*FileUploadChunkRequest) Descriptor() ([]byte, []int) {
	return file_system_api_proto_rawDescGZIP(), []int{4}
}

func (x *FileUploadChunkRequest) GetFileDescription() *FileDescription {
	if x != nil {
		return x.FileDescription
	}
	return nil
}

func (x *FileUploadChunkRequest) GetChunks() uint32 {
	if x != nil {
		return x.Chunks
	}
	return 0
}

func (x *FileUploadChunkRequest) GetChunkId() uint32 {
	if x != nil {
		return x.ChunkId
	}
	return 0
}

func (x *FileUploadChunkRequest) GetChunk() []byte {
	if x != nil {
		return x.Chunk
	}
	return nil
}

func (x *FileUploadChunkRequest) GetCancelUpload() bool {
	if x != nil {
		return x.CancelUpload
	}
	return false
}

func (x *FileUploadChunkRequest) GetUploadTimeout() uint32 {
	if x != nil {
		return x.UploadTimeout
	}
	return 0
}

type FileUploadResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Data:
	//	*FileUploadResponse_Finished
	//	*FileUploadResponse_Cancelled
	//	*FileUploadResponse_ErrorMessage
	Data isFileUploadResponse_Data `protobuf_oneof:"data"`
}

func (x *FileUploadResponse) Reset() {
	*x = FileUploadResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_system_api_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FileUploadResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FileUploadResponse) ProtoMessage() {}

func (x *FileUploadResponse) ProtoReflect() protoreflect.Message {
	mi := &file_system_api_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FileUploadResponse.ProtoReflect.Descriptor instead.
func (*FileUploadResponse) Descriptor() ([]byte, []int) {
	return file_system_api_proto_rawDescGZIP(), []int{5}
}

func (m *FileUploadResponse) GetData() isFileUploadResponse_Data {
	if m != nil {
		return m.Data
	}
	return nil
}

func (x *FileUploadResponse) GetFinished() bool {
	if x, ok := x.GetData().(*FileUploadResponse_Finished); ok {
		return x.Finished
	}
	return false
}

func (x *FileUploadResponse) GetCancelled() bool {
	if x, ok := x.GetData().(*FileUploadResponse_Cancelled); ok {
		return x.Cancelled
	}
	return false
}

func (x *FileUploadResponse) GetErrorMessage() string {
	if x, ok := x.GetData().(*FileUploadResponse_ErrorMessage); ok {
		return x.ErrorMessage
	}
	return ""
}

type isFileUploadResponse_Data interface {
	isFileUploadResponse_Data()
}

type FileUploadResponse_Finished struct {
	Finished bool `protobuf:"varint,1,opt,name=finished,proto3,oneof"`
}

type FileUploadResponse_Cancelled struct {
	Cancelled bool `protobuf:"varint,2,opt,name=cancelled,proto3,oneof"`
}

type FileUploadResponse_ErrorMessage struct {
	ErrorMessage string `protobuf:"bytes,3,opt,name=errorMessage,proto3,oneof"`
}

func (*FileUploadResponse_Finished) isFileUploadResponse_Data() {}

func (*FileUploadResponse_Cancelled) isFileUploadResponse_Data() {}

func (*FileUploadResponse_ErrorMessage) isFileUploadResponse_Data() {}

var File_system_api_proto protoreflect.FileDescriptor

var file_system_api_proto_rawDesc = []byte{
	0x0a, 0x10, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x04, 0x62, 0x61, 0x73, 0x65, 0x1a, 0x0c, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xba, 0x01, 0x0a, 0x0d, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x33, 0x0a, 0x0b, 0x6e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e,
	0x62, 0x61, 0x73, 0x65, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x0b, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x26, 0x0a,
	0x0e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x4a, 0x73, 0x6f, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x73, 0x4a, 0x73, 0x6f, 0x6e, 0x12, 0x26, 0x0a, 0x0e, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65,
	0x45, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6c,
	0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x45, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x65, 0x12, 0x24, 0x0a,
	0x0d, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x22, 0x7c, 0x0a, 0x0d, 0x52, 0x65, 0x6c, 0x6f, 0x61, 0x64, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x12, 0x3b, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x62, 0x61,
	0x73, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x48, 0x00, 0x52, 0x0d, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x24, 0x0a, 0x0c, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0c, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0x08, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x22, 0x3d, 0x0a, 0x0f, 0x46, 0x69, 0x6c, 0x65, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x68, 0x61, 0x32, 0x35, 0x36, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x68, 0x61, 0x32, 0x35, 0x36, 0x12, 0x12, 0x0a, 0x04,
	0x70, 0x61, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68,
	0x22, 0x76, 0x0a, 0x11, 0x46, 0x69, 0x6c, 0x65, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x41, 0x0a, 0x0f, 0x66, 0x69, 0x6c, 0x65, 0x44, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15,
	0x2e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x0f, 0x66, 0x69, 0x6c, 0x65, 0x44, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x05, 0x63, 0x68, 0x75, 0x6e,
	0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x00, 0x52, 0x05, 0x63, 0x68, 0x75, 0x6e, 0x6b,
	0x42, 0x06, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0xeb, 0x01, 0x0a, 0x16, 0x46, 0x69, 0x6c,
	0x65, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x3f, 0x0a, 0x0f, 0x66, 0x69, 0x6c, 0x65, 0x44, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x62,
	0x61, 0x73, 0x65, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x0f, 0x66, 0x69, 0x6c, 0x65, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x73, 0x12, 0x18, 0x0a, 0x07,
	0x63, 0x68, 0x75, 0x6e, 0x6b, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x63,
	0x68, 0x75, 0x6e, 0x6b, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x12, 0x22, 0x0a, 0x0c,
	0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0c, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64,
	0x12, 0x24, 0x0a, 0x0d, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75,
	0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x54,
	0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x22, 0x80, 0x01, 0x0a, 0x12, 0x46, 0x69, 0x6c, 0x65, 0x55,
	0x70, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1c, 0x0a,
	0x08, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x48,
	0x00, 0x52, 0x08, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x12, 0x1e, 0x0a, 0x09, 0x63,
	0x61, 0x6e, 0x63, 0x65, 0x6c, 0x6c, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00,
	0x52, 0x09, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x6c, 0x65, 0x64, 0x12, 0x24, 0x0a, 0x0c, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x00, 0x52, 0x0c, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x42, 0x06, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x32, 0xc4, 0x02, 0x0a, 0x0d, 0x53, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x36, 0x0a, 0x10, 0x47,
	0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x0b, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x13, 0x2e, 0x62,
	0x61, 0x73, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x22, 0x00, 0x12, 0x2e, 0x0a, 0x0b, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x69, 0x67, 0x6e, 0x61,
	0x6c, 0x73, 0x12, 0x0f, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x53, 0x70,
	0x61, 0x63, 0x65, 0x1a, 0x0c, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x46, 0x72, 0x61, 0x6d, 0x65,
	0x73, 0x22, 0x00, 0x12, 0x4b, 0x0a, 0x0f, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x46, 0x69, 0x6c,
	0x65, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x12, 0x1c, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x46, 0x69,
	0x6c, 0x65, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x46, 0x69, 0x6c, 0x65,
	0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x43, 0x0a, 0x0a, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x17,
	0x2e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x46,
	0x69, 0x6c, 0x65, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x28, 0x01, 0x12, 0x39, 0x0a, 0x13, 0x52, 0x65, 0x6c, 0x6f, 0x61, 0x64, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0b, 0x2e, 0x62,
	0x61, 0x73, 0x65, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x13, 0x2e, 0x62, 0x61, 0x73, 0x65,
	0x2e, 0x52, 0x65, 0x6c, 0x6f, 0x61, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x00,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_system_api_proto_rawDescOnce sync.Once
	file_system_api_proto_rawDescData = file_system_api_proto_rawDesc
)

func file_system_api_proto_rawDescGZIP() []byte {
	file_system_api_proto_rawDescOnce.Do(func() {
		file_system_api_proto_rawDescData = protoimpl.X.CompressGZIP(file_system_api_proto_rawDescData)
	})
	return file_system_api_proto_rawDescData
}

var file_system_api_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_system_api_proto_goTypes = []interface{}{
	(*Configuration)(nil),          // 0: base.Configuration
	(*ReloadMessage)(nil),          // 1: base.ReloadMessage
	(*FileDescription)(nil),        // 2: base.FileDescription
	(*FileUploadRequest)(nil),      // 3: base.FileUploadRequest
	(*FileUploadChunkRequest)(nil), // 4: base.FileUploadChunkRequest
	(*FileUploadResponse)(nil),     // 5: base.FileUploadResponse
	(*NetworkInfo)(nil),            // 6: base.NetworkInfo
	(*Empty)(nil),                  // 7: base.Empty
	(*NameSpace)(nil),              // 8: base.NameSpace
	(*Frames)(nil),                 // 9: base.Frames
}
var file_system_api_proto_depIdxs = []int32{
	6, // 0: base.Configuration.networkInfo:type_name -> base.NetworkInfo
	0, // 1: base.ReloadMessage.configuration:type_name -> base.Configuration
	2, // 2: base.FileUploadRequest.fileDescription:type_name -> base.FileDescription
	2, // 3: base.FileUploadChunkRequest.fileDescription:type_name -> base.FileDescription
	7, // 4: base.SystemService.GetConfiguration:input_type -> base.Empty
	8, // 5: base.SystemService.ListSignals:input_type -> base.NameSpace
	4, // 6: base.SystemService.UploadFileChunk:input_type -> base.FileUploadChunkRequest
	3, // 7: base.SystemService.UploadFile:input_type -> base.FileUploadRequest
	7, // 8: base.SystemService.ReloadConfiguration:input_type -> base.Empty
	0, // 9: base.SystemService.GetConfiguration:output_type -> base.Configuration
	9, // 10: base.SystemService.ListSignals:output_type -> base.Frames
	5, // 11: base.SystemService.UploadFileChunk:output_type -> base.FileUploadResponse
	5, // 12: base.SystemService.UploadFile:output_type -> base.FileUploadResponse
	1, // 13: base.SystemService.ReloadConfiguration:output_type -> base.ReloadMessage
	9, // [9:14] is the sub-list for method output_type
	4, // [4:9] is the sub-list for method input_type
	4, // [4:4] is the sub-list for extension type_name
	4, // [4:4] is the sub-list for extension extendee
	0, // [0:4] is the sub-list for field type_name
}

func init() { file_system_api_proto_init() }
func file_system_api_proto_init() {
	if File_system_api_proto != nil {
		return
	}
	file_common_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_system_api_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Configuration); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_system_api_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReloadMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_system_api_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FileDescription); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_system_api_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FileUploadRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_system_api_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FileUploadChunkRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_system_api_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FileUploadResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_system_api_proto_msgTypes[1].OneofWrappers = []interface{}{
		(*ReloadMessage_Configuration)(nil),
		(*ReloadMessage_ErrorMessage)(nil),
	}
	file_system_api_proto_msgTypes[3].OneofWrappers = []interface{}{
		(*FileUploadRequest_FileDescription)(nil),
		(*FileUploadRequest_Chunk)(nil),
	}
	file_system_api_proto_msgTypes[5].OneofWrappers = []interface{}{
		(*FileUploadResponse_Finished)(nil),
		(*FileUploadResponse_Cancelled)(nil),
		(*FileUploadResponse_ErrorMessage)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_system_api_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_system_api_proto_goTypes,
		DependencyIndexes: file_system_api_proto_depIdxs,
		MessageInfos:      file_system_api_proto_msgTypes,
	}.Build()
	File_system_api_proto = out.File
	file_system_api_proto_rawDesc = nil
	file_system_api_proto_goTypes = nil
	file_system_api_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// SystemServiceClient is the client API for SystemService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type SystemServiceClient interface {
	GetConfiguration(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Configuration, error)
	ListSignals(ctx context.Context, in *NameSpace, opts ...grpc.CallOption) (*Frames, error)
	UploadFileChunk(ctx context.Context, in *FileUploadChunkRequest, opts ...grpc.CallOption) (*FileUploadResponse, error)
	UploadFile(ctx context.Context, opts ...grpc.CallOption) (SystemService_UploadFileClient, error)
	// will not return until new configuration is tested an active, make sure to set timeout to a large value. (fibex on pi > 50s)
	ReloadConfiguration(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ReloadMessage, error)
}

type systemServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSystemServiceClient(cc grpc.ClientConnInterface) SystemServiceClient {
	return &systemServiceClient{cc}
}

func (c *systemServiceClient) GetConfiguration(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Configuration, error) {
	out := new(Configuration)
	err := c.cc.Invoke(ctx, "/base.SystemService/GetConfiguration", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systemServiceClient) ListSignals(ctx context.Context, in *NameSpace, opts ...grpc.CallOption) (*Frames, error) {
	out := new(Frames)
	err := c.cc.Invoke(ctx, "/base.SystemService/ListSignals", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systemServiceClient) UploadFileChunk(ctx context.Context, in *FileUploadChunkRequest, opts ...grpc.CallOption) (*FileUploadResponse, error) {
	out := new(FileUploadResponse)
	err := c.cc.Invoke(ctx, "/base.SystemService/UploadFileChunk", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systemServiceClient) UploadFile(ctx context.Context, opts ...grpc.CallOption) (SystemService_UploadFileClient, error) {
	stream, err := c.cc.NewStream(ctx, &_SystemService_serviceDesc.Streams[0], "/base.SystemService/UploadFile", opts...)
	if err != nil {
		return nil, err
	}
	x := &systemServiceUploadFileClient{stream}
	return x, nil
}

type SystemService_UploadFileClient interface {
	Send(*FileUploadRequest) error
	CloseAndRecv() (*FileUploadResponse, error)
	grpc.ClientStream
}

type systemServiceUploadFileClient struct {
	grpc.ClientStream
}

func (x *systemServiceUploadFileClient) Send(m *FileUploadRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *systemServiceUploadFileClient) CloseAndRecv() (*FileUploadResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(FileUploadResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *systemServiceClient) ReloadConfiguration(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ReloadMessage, error) {
	out := new(ReloadMessage)
	err := c.cc.Invoke(ctx, "/base.SystemService/ReloadConfiguration", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SystemServiceServer is the server API for SystemService service.
type SystemServiceServer interface {
	GetConfiguration(context.Context, *Empty) (*Configuration, error)
	ListSignals(context.Context, *NameSpace) (*Frames, error)
	UploadFileChunk(context.Context, *FileUploadChunkRequest) (*FileUploadResponse, error)
	UploadFile(SystemService_UploadFileServer) error
	// will not return until new configuration is tested an active, make sure to set timeout to a large value. (fibex on pi > 50s)
	ReloadConfiguration(context.Context, *Empty) (*ReloadMessage, error)
}

// UnimplementedSystemServiceServer can be embedded to have forward compatible implementations.
type UnimplementedSystemServiceServer struct {
}

func (*UnimplementedSystemServiceServer) GetConfiguration(context.Context, *Empty) (*Configuration, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetConfiguration not implemented")
}
func (*UnimplementedSystemServiceServer) ListSignals(context.Context, *NameSpace) (*Frames, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSignals not implemented")
}
func (*UnimplementedSystemServiceServer) UploadFileChunk(context.Context, *FileUploadChunkRequest) (*FileUploadResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UploadFileChunk not implemented")
}
func (*UnimplementedSystemServiceServer) UploadFile(SystemService_UploadFileServer) error {
	return status.Errorf(codes.Unimplemented, "method UploadFile not implemented")
}
func (*UnimplementedSystemServiceServer) ReloadConfiguration(context.Context, *Empty) (*ReloadMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReloadConfiguration not implemented")
}

func RegisterSystemServiceServer(s *grpc.Server, srv SystemServiceServer) {
	s.RegisterService(&_SystemService_serviceDesc, srv)
}

func _SystemService_GetConfiguration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemServiceServer).GetConfiguration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/base.SystemService/GetConfiguration",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemServiceServer).GetConfiguration(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _SystemService_ListSignals_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NameSpace)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemServiceServer).ListSignals(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/base.SystemService/ListSignals",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemServiceServer).ListSignals(ctx, req.(*NameSpace))
	}
	return interceptor(ctx, in, info, handler)
}

func _SystemService_UploadFileChunk_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FileUploadChunkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemServiceServer).UploadFileChunk(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/base.SystemService/UploadFileChunk",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemServiceServer).UploadFileChunk(ctx, req.(*FileUploadChunkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SystemService_UploadFile_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(SystemServiceServer).UploadFile(&systemServiceUploadFileServer{stream})
}

type SystemService_UploadFileServer interface {
	SendAndClose(*FileUploadResponse) error
	Recv() (*FileUploadRequest, error)
	grpc.ServerStream
}

type systemServiceUploadFileServer struct {
	grpc.ServerStream
}

func (x *systemServiceUploadFileServer) SendAndClose(m *FileUploadResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *systemServiceUploadFileServer) Recv() (*FileUploadRequest, error) {
	m := new(FileUploadRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _SystemService_ReloadConfiguration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemServiceServer).ReloadConfiguration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/base.SystemService/ReloadConfiguration",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemServiceServer).ReloadConfiguration(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

var _SystemService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "base.SystemService",
	HandlerType: (*SystemServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetConfiguration",
			Handler:    _SystemService_GetConfiguration_Handler,
		},
		{
			MethodName: "ListSignals",
			Handler:    _SystemService_ListSignals_Handler,
		},
		{
			MethodName: "UploadFileChunk",
			Handler:    _SystemService_UploadFileChunk_Handler,
		},
		{
			MethodName: "ReloadConfiguration",
			Handler:    _SystemService_ReloadConfiguration_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "UploadFile",
			Handler:       _SystemService_UploadFile_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "system_api.proto",
}
